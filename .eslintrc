{
  "root": true, // Make sure eslint picks up the config at the root of the directory
  "env": {
    "browser": true,
    "es2020": true,
    "amd": true, // Enables require() and define() as global variables as per the amd spec.
    "node": true // Enables Node.js global variables and Node.js scoping.
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:prettier/recommended" // Make this the last element so prettier config overrides other formatting rules
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true // Enable JSX since we're using React
    },
    "ecmaVersion": 2020, // Use the latest ecmascript standard
    "sourceType": "module" // Allows using import/export statements
  },
  "settings": {
    "react": {
      "version": "detect" // Automatically detect the react version
    },
    "import/resolver": {
      "webpack": {
        "config": "config/webpack.config.js" // Include the webpack
      }
    }
  },
  "plugins": ["react", "@typescript-eslint"],
  "rules": {
    "prettier/prettier": ["error", {}, { "usePrettierrc": true }], // Use .prettierrc file as source
    // "no-console": "warn",
    // "no-undef": "off", // Turned off no-undef because TS is handle this
    // "no-unused-vars": "off",
    // "@typescript-eslint/no-unused-vars": "error",
    // "@typescript-eslint/explicit-module-boundary-types": "off",
    // "@typescript-eslint/explicit-function-return-type": "off",
    // "@typescript-eslint/no-object-literal-type-assertion": "off",
    // "@typescript-eslint/indent": "off"
    "indent": ["error", 2],
    "linebreak-style": ["error", "unix"],
    "quotes": ["error", "single"],
    "no-console": "warn", // Warn me if console.log is dangling in files
    "no-unused-vars": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      { "vars": "all", "args": "after-used", "ignoreRestSiblings": false }
    ],
    "no-empty": "warn"
  }
}
